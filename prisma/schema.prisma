generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int             @id @default(autoincrement())
  email        String          @db.VarChar(255)
  password     String          @db.VarChar(255)
  names        String          @db.VarChar(100)
  surnames     String          @db.VarChar(100)
  role_id      Int
  created_at   DateTime        @default(now()) @db.Timestamp(0)
  
  roles        Roles          @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "linbk_user-roles")
  
  organizators Organizations[]
  subjects     Subjects[]
  tasks        Tasks[]

  @@index([role_id], map: "link_role-user")
}

model Roles {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(40)
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      Users[]
}

model Tasks {
  id         Int      @id @default(autoincrement())
  owner_id   Int
  subject_id Int
  name       String   @db.VarChar(100)
  file       String   @db.VarChar(255)
  points     Int      @default(0) @db.Int()
  notes      String   @db.VarChar(120)
  view_code  String   @db.VarChar(12)
  created_at DateTime @default(now()) @db.Timestamp(6)

  users   Users    @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "linbk_task-owner")
  subject Subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade, map: "linbk_task-subject")

  @@index([owner_id], map: "link_task-subject")
  @@index([owner_id], map: "link_task-user")
}

model Subjects {
  id              Int      @id @default(autoincrement())
  owner_id        Int
  organizator_id  Int
  require_support Boolean  @default(false)
  name            String   @db.VarChar(100)
  logo_url        String   @db.VarChar(255)
  over_note       String   @default("10") @db.VarChar(3)
  json_data       Json     @db.Json
  created_at      DateTime @default(now()) @db.Timestamp(6)

  users        Users         @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "linbk_subject-owner")
  organizators Organizations @relation(fields: [organizator_id], references: [id], onDelete: Cascade, map: "linbk_subject-organizator")
  tasks        Tasks[]

  @@index([owner_id], map: "link_subject-owner")
  @@index([organizator_id], map: "link_subject-organizator")
}

model Organizations {
  id          Int        @id @default(autoincrement())
  owner_id    Int
  short_code  String     @db.VarChar(16)
  name        String     @db.VarChar(60)
  description String     @db.VarChar(255)
  members     Json       @db.Json
  created_at  DateTime   @default(now()) @db.Timestamp(6)

  users       Users      @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "linbk_orgs-users")
  subjects    Subjects[]

  @@index([owner_id], map: "linbk_orgs-member")
  @@index([owner_id], map: "linbk_orgs-users")
}
